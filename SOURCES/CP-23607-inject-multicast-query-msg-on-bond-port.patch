From bf98afd319ef6ff31bac617bd1fe879cef558e45 Mon Sep 17 00:00:00 2001
From: Chunjie Zhu <chunjie.zhu@cloud.com>
Date: Wed, 23 Aug 2023 06:20:00 +0000
Subject: [PATCH] CP-23607: inject multicast query msg on bond port

diff --git a/lib/packets.c b/lib/packets.c
index 1dcd4a6fcd21..8b9e6f5ac768 100644
--- a/lib/packets.c
+++ b/lib/packets.c
@@ -192,6 +192,46 @@ eth_addr_from_string(const char *s, struct eth_addr *ea)
     }
 }
 
+ void
+ compose_igmp_query_packet(struct dp_packet *packet)
+ {
+     struct eth_header *eth;
+     struct ip_header *nh;
+     struct igmp_header *igmp;
+     static const struct eth_addr dst_mac = {{{0x01, 0x00, 0x5e, 0x00, 0x00, 0x01}}};
+
+     dp_packet_prealloc_tailroom(packet, 2 + ETH_HEADER_LEN + IP_HEADER_LEN + IGMP_HEADER_LEN);
+
+     eth = dp_packet_put_uninit(packet, ETH_HEADER_LEN);
+     eth->eth_dst = dst_mac;
+     eth->eth_src = eth_addr_zero;
+     eth->eth_type = htons(ETH_TYPE_IP);
+
+     nh = dp_packet_put_uninit(packet, IP_HEADER_LEN);
+     nh->ip_ihl_ver = IP_IHL_VER(5, 4);
+     nh->ip_tos = 0;
+     nh->ip_tot_len = htons(IP_HEADER_LEN + IGMP_HEADER_LEN);
+     nh->ip_id = htons(0);
+     nh->ip_frag_off = htons(0);
+     nh->ip_ttl = 0;
+     nh->ip_proto = IPPROTO_IGMP;
+     nh->ip_csum = htonl(0);
+     put_16aligned_be32(&(nh->ip_src), htonl(0));
+     put_16aligned_be32(&(nh->ip_dst), htonl(0xE0000001)); // 224.0.0.1
+     nh->ip_csum = csum(nh, IP_HEADER_LEN);
+
+     igmp = dp_packet_put_uninit(packet, IGMP_HEADER_LEN);
+     igmp->igmp_type = IGMP_HOST_MEMBERSHIP_QUERY;
+     igmp->igmp_code = 10;
+     igmp->igmp_csum = htons(0);
+     put_16aligned_be32(&igmp->group, 0);
+     igmp->igmp_csum = csum(igmp, IGMP_HEADER_LEN);
+
+     dp_packet_reset_offsets(packet);
+     dp_packet_set_l3(packet, nh);
+     dp_packet_set_l4(packet, igmp);
+ }
+
 /* Fills 'b' with a Reverse ARP packet with Ethernet source address 'eth_src'.
  * This function is used by Open vSwitch to compose packets in cases where
  * context is important but content doesn't (or shouldn't) matter.
diff --git a/lib/packets.h b/lib/packets.h
index 5bdf6e4bbd97..974e1c84928b 100644
--- a/lib/packets.h
+++ b/lib/packets.h
@@ -337,6 +337,7 @@ static inline uint32_t hash_mac(const struct eth_addr ea,
 bool eth_addr_is_reserved(const struct eth_addr);
 bool eth_addr_from_string(const char *, struct eth_addr *);
 
+void compose_igmp_query_packet(struct dp_packet *);
 void compose_rarp(struct dp_packet *, const struct eth_addr);
 
 void eth_push_vlan(struct dp_packet *, ovs_be16 tpid, ovs_be16 tci);
diff --git a/ofproto/bond.c b/ofproto/bond.c
index a7c859b9098b..e64372fd69c0 100644
--- a/ofproto/bond.c
+++ b/ofproto/bond.c
@@ -696,7 +696,7 @@ bond_member_set_may_enable(struct bond *bond, void *member_, bool may_enable)
  *
  * Returns true if the caller should revalidate its flows.
  *
- * The caller should check bond_should_send_learning_packets() afterward. */
+ * The caller should check bond_should_send_remedy_packets() afterward. */
 bool
 bond_run(struct bond *bond, enum lacp_status lacp_status)
 {
@@ -789,13 +789,19 @@ may_send_learning_packets(const struct bond *bond)
  * is located.  For each MAC that has been learned on a port other than 'bond',
  * it should call bond_compose_learning_packet().
  *
+ * Multicast on bond reuses same logic of MAC learning.
+ * If this function returns true, then the client should iterate its IGMP
+ * snooping table for the ports listening on some multicast group(s). For each
+ * port, client should inject IGMPv2 query packet on the port to make the
+ * multicast receiver response IGMP report message.
+ *
  * This function will only return true if 'bond' is in SLB or active-backup
  * mode and LACP is not negotiated.  Otherwise sending learning packets isn't
  * necessary.
  *
  * Calling this function resets the state that it checks. */
 bool
-bond_should_send_learning_packets(struct bond *bond)
+bond_should_send_remedy_packets(struct bond *bond)
 {
     bool send;
 
@@ -808,7 +814,7 @@ bond_should_send_learning_packets(struct bond *bond)
 
 /* Sends a gratuitous learning packet on 'bond' from 'eth_src' on 'vlan'.
  *
- * See bond_should_send_learning_packets() for description of usage. The
+ * See bond_should_send_remedy_packets() for description of usage. The
  * caller should send the composed packet on the port associated with
  * port_aux and takes ownership of the returned ofpbuf. */
 struct dp_packet *
diff --git a/ofproto/bond.h b/ofproto/bond.h
index e7f7ea7a9518..653b4a29aaea 100644
--- a/ofproto/bond.h
+++ b/ofproto/bond.h
@@ -84,8 +84,10 @@ void bond_wait(struct bond *);
 
 void bond_member_set_may_enable(struct bond *, void *member_, bool may_enable);
 
-/* Special MAC learning support for SLB bonding. */
-bool bond_should_send_learning_packets(struct bond *);
+/* Special MAC learning support for SLB bonding.
+ * Inject IGMPv2 query.
+ * */
+bool bond_should_send_remedy_packets(struct bond *);
 struct dp_packet *bond_compose_learning_packet(struct bond *,
                                                const struct eth_addr eth_src,
                                                uint16_t vlan, void **port_aux);
diff --git a/ofproto/ofproto-dpif.c b/ofproto/ofproto-dpif.c
index 60f81c6b71c8..a27b808aec85 100644
--- a/ofproto/ofproto-dpif.c
+++ b/ofproto/ofproto-dpif.c
@@ -3598,6 +3598,8 @@ bundle_send_learning_packets(struct ofbundle *bundle)
     }
 }
 
+static void bundle_send_igmp_query_packets(struct ofbundle *);
+
 static void
 bundle_run(struct ofbundle *bundle)
 {
@@ -3615,7 +3617,8 @@ bundle_run(struct ofbundle *bundle)
             bundle->ofproto->backer->need_revalidate = REV_BOND;
         }
 
-        if (bond_should_send_learning_packets(bundle->bond)) {
+        if (bond_should_send_remedy_packets(bundle->bond)) {
+            bundle_send_igmp_query_packets(bundle);
             bundle_send_learning_packets(bundle);
         }
     }
@@ -6138,6 +6141,82 @@ ofproto_unixctl_mcast_snooping_show(struct unixctl_conn *conn,
     ds_destroy(&ds);
 }
 
+static void
+bundle_send_igmp_query_packets(struct ofbundle *bundle)
+{
+    struct ofproto_dpif *ofproto;
+    const struct mcast_group *grp;
+    struct mcast_group_bundle *bundle_in_grp;
+    struct ofport_dpif *port_in_ms;
+    int error, n_packets, n_errors;
+    struct dp_packet *packet;
+    struct shash_node *sending_port;
+    struct {
+        struct ofport_dpif *port;
+    } *port_node;
+    struct shash all_bundles = SHASH_INITIALIZER(&all_bundles);
+    int ret;
+
+    ofproto = bundle->ofproto;
+    if (!mcast_snooping_enabled(ofproto->ms)) {
+        return;
+    }
+
+    /* go through IGMP snooping table */
+    ovs_rwlock_rdlock(&ofproto->ms->rwlock);
+    LIST_FOR_EACH (grp, group_node, &ofproto->ms->group_lru) {
+        if (IN6_IS_ADDR_V4MAPPED(&grp->addr)) {
+            /* only IPv4 group */
+            LIST_FOR_EACH(bundle_in_grp, bundle_node, &grp->bundle_lru) {
+                    char name[OFP_MAX_PORT_NAME_LEN];
+                    port_in_ms = ofbundle_get_a_port(bundle_in_grp->port);
+                    ofputil_port_to_string(port_in_ms->up.ofp_port,
+                                           NULL, name, sizeof name);
+                    if (NULL == shash_find_data(&all_bundles, name)) {
+                        port_node = xmalloc(sizeof *port_node);
+                        port_node->port = port_in_ms;
+                        shash_add(&all_bundles, name, port_node);
+                    }
+            }
+        }
+    }
+    ovs_rwlock_unlock(&ofproto->ms->rwlock);
+
+    if (shash_is_empty(&all_bundles)) {
+        return;
+    }
+
+    // send IGMPv2 query messsage
+    packet = dp_packet_new(0);
+    dp_packet_clear(packet);
+    compose_igmp_query_packet(packet);
+
+    error = n_packets = n_errors = 0;
+    SHASH_FOR_EACH(sending_port, &all_bundles) {
+        port_node = sending_port->data;
+        ret = ofproto_dpif_send_packet(port_node->port, false, packet);
+        free(port_node);
+        sending_port->data = NULL;
+        if (ret) {
+            error = ret;
+            n_errors++;
+        }
+        n_packets++;
+    }
+    dp_packet_delete(packet);
+    shash_destroy(&all_bundles);
+
+    if (n_errors) {
+        static struct vlog_rate_limit rll = VLOG_RATE_LIMIT_INIT(1, 5);
+        VLOG_WARN_RL(&rll, "bond %s: %d errors sending %d IGMP query "
+                     "packets, last error was: %s",
+                     bundle->name, n_errors, n_packets, ovs_strerror(error));
+    } else {
+        VLOG_DBG("bond %s: sent %d IGMP query packets",
+                 bundle->name, n_packets);
+    }
+}
+
 /* Store the current ofprotos in 'ofproto_shash'.  Returns a sorted list
  * of the 'ofproto_shash' nodes.  It is the responsibility of the caller
  * to destroy 'ofproto_shash' and free the returned value. */
