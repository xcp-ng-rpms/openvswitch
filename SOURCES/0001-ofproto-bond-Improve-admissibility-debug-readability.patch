From bd0fec42a28b10e39684430aa702429fcffc90e2 Mon Sep 17 00:00:00 2001
From: David Marchand <david.marchand@redhat.com>
Date: Fri, 15 Oct 2021 16:30:56 +0200
Subject: [PATCH] ofproto/bond: Improve admissibility debug readability.

The admissibility check currently log a message like (line wrapped in
this commitlog):
bond(revalidator11)|DBG|member (dpdk0): Admissibility
verdict is to drop pkt as different port is learned.active member: false,
may_enable: true enable: true LACP status:2

Fix spaces around the period character and separate debug infos with
commas.
Prefix all log messages in this check with bond and member names.
Display a human readable string for LACP status.

New logs look like:
bond(revalidator11)|DBG|bond dpdkbond0: member dpdk0: admissibility
verdict is to drop pkt as different port is learned, active member: false,
may_enable: true, enabled: true, LACP status: off

Signed-off-by: David Marchand <david.marchand@redhat.com>
Acked-by: Kevin Traynor <ktraynor@redhat.com>
Signed-off-by: Ilya Maximets <i.maximets@ovn.org>
diff --git a/lib/lacp.c b/lib/lacp.c
index bdaf7ad1d..3ff46985a 100644
--- a/lib/lacp.c
+++ b/lib/lacp.c
@@ -385,6 +385,20 @@ lacp_status(const struct lacp *lacp) OVS_EXCLUDED(mutex)
     }
 }
 
+const char *lacp_status_description(enum lacp_status lacp_status)
+{
+    switch (lacp_status) {
+    case LACP_NEGOTIATED:
+        return "negotiated";
+    case LACP_CONFIGURED:
+        return "configured";
+    case LACP_DISABLED:
+        return "off";
+    default:
+        return "<unknown>";
+    }
+}
+
 /* Registers 'slave_' as subordinate to 'lacp'.  This should be called at least
  * once per slave in a LACP managed bond.  Should also be called whenever a
  * slave's settings change. */
diff --git a/lib/lacp.h b/lib/lacp.h
index 0dfaef05c..d42f83e6b 100644
--- a/lib/lacp.h
+++ b/lib/lacp.h
@@ -49,6 +49,7 @@ bool lacp_is_active(const struct lacp *);
 bool lacp_process_packet(struct lacp *, const void *slave,
                          const struct dp_packet *packet);
 enum lacp_status lacp_status(const struct lacp *);
+const char *lacp_status_description(enum lacp_status);
 
 struct lacp_slave_settings {
     char *name;                       /* Name (for debugging). */
diff --git a/ofproto/bond.c b/ofproto/bond.c
index 177d55daa..899078feb 100644
--- a/ofproto/bond.c
+++ b/ofproto/bond.c
@@ -822,7 +822,7 @@ bond_check_admissibility(struct bond *bond, const void *slave_,
         verdict = (slave->enabled || slave->may_enable) ? BV_ACCEPT : BV_DROP;
         if (!slave->enabled && slave->may_enable) {
             VLOG_DBG_RL(&rl, "bond %s: slave %s: main thread not yet enabled slave",
-                         bond->name, bond->active_slave->name);
+                        bond->name, bond->active_slave->name);
         }
         goto out;
     case LACP_CONFIGURED:
@@ -854,9 +854,9 @@ bond_check_admissibility(struct bond *bond, const void *slave_,
         /* Drop all packets which arrive on backup slaves.  This is similar to
          * how Linux bonding handles active-backup bonds. */
         if (bond->active_slave != slave) {
-            VLOG_DBG_RL(&rl, "active-backup bond received packet on backup"
-                        " slave (%s) destined for " ETH_ADDR_FMT,
-                        slave->name, ETH_ADDR_ARGS(eth_dst));
+            VLOG_DBG_RL(&rl, "bond %s: slave %s: active-backup bond received "
+                        "packet on backup slave destined for " ETH_ADDR_FMT,
+                        bond->name, slave->name, ETH_ADDR_ARGS(eth_dst));
             goto out;
         }
         verdict = BV_ACCEPT;
@@ -876,16 +876,17 @@ bond_check_admissibility(struct bond *bond, const void *slave_,
     OVS_NOT_REACHED();
 out:
     if (slave && (verdict != BV_ACCEPT)) {
-        VLOG_DBG_RL(&rl, "slave (%s): Admissibility verdict is to drop pkt %s."
-                    "active slave: %s, may_enable: %s enable: %s "
-                    "LACP status:%d",
-                    slave->name,
+        VLOG_DBG_RL(&rl, "bond %s: slave %s: "
+                    "admissibility verdict is to drop pkt%s, "
+                    "active slave: %s, may_enable: %s, enabled: %s, "
+                    "LACP status: %s",
+                    bond->name, slave->name,
                     (verdict == BV_DROP_IF_MOVED) ?
-                        "as different port is learned" : "",
+                        " as different port is learned" : "",
                     (bond->active_slave == slave) ? "true" : "false",
                     slave->may_enable ? "true" : "false",
                     slave->enabled ? "true" : "false",
-                    bond->lacp_status);
+                    lacp_status_description(bond->lacp_status));
     }
 
     ovs_rwlock_unlock(&rwlock);
@@ -1368,21 +1369,8 @@ bond_print_details(struct ds *ds, const struct bond *bond)
                       bond->next_rebalance - time_msec());
     }
 
-    ds_put_cstr(ds, "lacp_status: ");
-    switch (bond->lacp_status) {
-    case LACP_NEGOTIATED:
-        ds_put_cstr(ds, "negotiated\n");
-        break;
-    case LACP_CONFIGURED:
-        ds_put_cstr(ds, "configured\n");
-        break;
-    case LACP_DISABLED:
-        ds_put_cstr(ds, "off\n");
-        break;
-    default:
-        ds_put_cstr(ds, "<unknown>\n");
-        break;
-    }
+    ds_put_format(ds, "lacp_status: %s\n",
+                  lacp_status_description(bond->lacp_status));
 
     ds_put_cstr(ds, "active slave mac: ");
     ds_put_format(ds, ETH_ADDR_FMT, ETH_ADDR_ARGS(bond->active_slave_mac));
