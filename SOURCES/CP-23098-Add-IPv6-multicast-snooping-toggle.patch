diff --git a/lib/mcast-snooping.c b/lib/mcast-snooping.c
index 029ca2855..796f1e99b 100644
--- a/lib/mcast-snooping.c
+++ b/lib/mcast-snooping.c
@@ -51,6 +51,12 @@ mcast_snooping_enabled(const struct mcast_snooping *ms)
     return !!ms;
 }
 
+bool
+mcast_snooping_ipv6_enabled(const struct mcast_snooping *ms)
+{
+   return ms->ipv6_mcast_snooping;
+}
+
 bool
 mcast_snooping_flood_unreg(const struct mcast_snooping *ms)
 {
@@ -255,6 +261,20 @@ mcast_snooping_set_flood_unreg(struct mcast_snooping *ms, bool enable)
     return prev != enable;
 }
 
+
+/* Enable/disable IPv6 multicast snooping.
+ *
+ * Returns true if previous state differs from current state,
+ * false otherwise. */
+bool
+mcast_snooping_set_ipv6_mcast_snooping_toggle(struct mcast_snooping *ms, bool enable)
+    OVS_REQ_WRLOCK(ms->rwlock)
+{
+    bool prev = ms->ipv6_mcast_snooping;
+    ms->ipv6_mcast_snooping = enable;
+    return prev != enable;
+}
+
 static struct mcast_group_bundle *
 mcast_group_bundle_lookup(struct mcast_snooping *ms OVS_UNUSED,
                           struct mcast_group *grp, void *port)
diff --git a/lib/mcast-snooping.h b/lib/mcast-snooping.h
index f120405da..4cf2a6f3c 100644
--- a/lib/mcast-snooping.h
+++ b/lib/mcast-snooping.h
@@ -138,12 +138,16 @@ struct mcast_snooping {
      * ports, otherwise send them to ports connected to multicast routers. */
     bool flood_unreg;
 
+    /* If true, enable IPv6 multicast snooping */
+    bool ipv6_mcast_snooping;
+
     struct ovs_refcount ref_cnt;
     struct ovs_rwlock rwlock;
 };
 
 /* Basics. */
 bool mcast_snooping_enabled(const struct mcast_snooping *ms);
+bool mcast_snooping_ipv6_enabled(const struct mcast_snooping *ms);
 bool mcast_snooping_flood_unreg(const struct mcast_snooping *ms);
 int mcast_mrouter_age(const struct mcast_snooping *ms,
                       const struct mcast_mrouter_bundle *m);
@@ -165,6 +169,9 @@ void mcast_snooping_set_max_entries(struct mcast_snooping *ms,
 bool
 mcast_snooping_set_flood_unreg(struct mcast_snooping *ms, bool enable)
     OVS_REQ_WRLOCK(ms->rwlock);
+bool
+mcast_snooping_set_ipv6_mcast_snooping_toggle(struct mcast_snooping *ms, bool enable)
+    OVS_REQ_WRLOCK(ms->rwlock);
 void mcast_snooping_set_port_flood(struct mcast_snooping *ms, void *port,
                                    bool flood)
     OVS_REQ_WRLOCK(ms->rwlock);
diff --git a/ofproto/ofproto-dpif-xlate.c b/ofproto/ofproto-dpif-xlate.c
index 196bb6dca..76c8a9d33 100644
--- a/ofproto/ofproto-dpif-xlate.c
+++ b/ofproto/ofproto-dpif-xlate.c
@@ -3201,7 +3201,7 @@ xlate_normal(struct xlate_ctx *ctx)
                 xlate_normal_flood(ctx, in_xbundle, &xvlan);
             }
             return;
-        } else if (is_mld(flow, wc)) {
+        } else if (is_mld(flow, wc) && mcast_snooping_ipv6_enabled(ctx->xbridge->ms)) {
             ctx->xout->slow |= SLOW_ACTION;
             if (ctx->xin->allow_side_effects && ctx->xin->packet) {
                 update_mcast_snooping_table(ctx, flow, vlan,
diff --git a/ofproto/ofproto-dpif.c b/ofproto/ofproto-dpif.c
index bd235ce2b..681585005 100644
--- a/ofproto/ofproto-dpif.c
+++ b/ofproto/ofproto-dpif.c
@@ -3742,6 +3742,9 @@ set_mcast_snooping(struct ofproto *ofproto_,
         if (mcast_snooping_set_flood_unreg(ofproto->ms, s->flood_unreg)) {
             ofproto->backer->need_revalidate = REV_RECONFIGURE;
         }
+        if (mcast_snooping_set_ipv6_mcast_snooping_toggle(ofproto->ms, s->ipv6_mcast_snooping)) {
+            ofproto->backer->need_revalidate = REV_RECONFIGURE;
+        }
         ovs_rwlock_unlock(&ofproto->ms->rwlock);
     } else {
         mcast_snooping_unref(ofproto->ms);
diff --git a/ofproto/ofproto.h b/ofproto/ofproto.h
index fa7973ac7..82d8278dc 100644
--- a/ofproto/ofproto.h
+++ b/ofproto/ofproto.h
@@ -189,6 +189,7 @@ struct ofproto_mcast_snooping_settings {
     unsigned int idle_time;     /* Entry is removed after the idle time
                                  * in seconds. */
     unsigned int max_entries;   /* Size of the multicast snooping table. */
+    bool ipv6_mcast_snooping;   /* If true, enable IPv6 multicast snooping */
 };
 
 struct ofproto_mcast_snooping_port_settings {
diff --git a/vswitchd/bridge.c b/vswitchd/bridge.c
index 81f073b1c..d95640be2 100644
--- a/vswitchd/bridge.c
+++ b/vswitchd/bridge.c
@@ -2209,6 +2209,8 @@ bridge_configure_mcast_snooping(struct bridge *br)
 
         br_s.flood_unreg = !smap_get_bool(
             oc, "mcast-snooping-disable-flood-unregistered", false);
+        br_s.ipv6_mcast_snooping = smap_get_bool(
+            oc, "enable-ipv6-mcast-snooping", true);
 
         /* Configure multicast snooping on the bridge */
         if (ofproto_set_mcast_snooping(br->ofproto, &br_s)) {
diff --git a/vswitchd/vswitch.xml b/vswitchd/vswitch.xml
index 0c8534f14..8d7a7436c 100644
--- a/vswitchd/vswitch.xml
+++ b/vswitchd/vswitch.xml
@@ -2420,6 +2420,12 @@
           unconditionally forwarded to the specific port.
         </p>
       </column>
+      <column name="other_config" key="enable-ipv6-mcast-snooping"
+              type='{"type": "boolean"}'>
+        <p>
+          If set to <code>true</code>, enable IPv6 multicast snooping.
+        </p>
+      </column>
       <column name="other_config" key="mcast-snooping-flood-reports"
               type='{"type": "boolean"}'>
         <p>
-- 
2.34.1

