From 0715f8e1134149a00fa61b17933d1496ce9bf012 Mon Sep 17 00:00:00 2001
From: Doug Goldstein <doug.goldstein@rackspace.com>
Date: Thu, 1 Feb 2018 14:44:21 -0600
Subject: [PATCH 02/18] O3eng applied patch on top of the NSX OVS

Retrieved from https://github.rackspace.com/O3Eng/xen-networking-scripts/blob/d5edf873bb29eb42f11e9b937f3a1b220f8fa040/our-ovs-xapi-sync and provided by sushil.suresh@rackspace.com
---
 ...sr_share_openvswitch_scripts_ovs-xapi-sync | 177 ++++++------------
 1 file changed, 62 insertions(+), 115 deletions(-)
 mode change 100755 => 100644 xenserver/usr_share_openvswitch_scripts_ovs-xapi-sync

diff --git a/xenserver/usr_share_openvswitch_scripts_ovs-xapi-sync b/xenserver/usr_share_openvswitch_scripts_ovs-xapi-sync
old mode 100755
new mode 100644
index bf6cdf849..e66afee91
--- a/xenserver/usr_share_openvswitch_scripts_ovs-xapi-sync
+++ b/xenserver/usr_share_openvswitch_scripts_ovs-xapi-sync
@@ -19,9 +19,13 @@
 # Its responsibilities include:
 #
 #   - Set the "bridge-id" key in the Bridge table.
-#   - Set the "iface-id" key in the Interface table.
 #   - Set the fail-mode on internal bridges.
 
+
+"""OVS Xapi Sync Script."""
+
+# NOTE(jkoelker) Modified for RS needs only syncs bridges
+
 import argparse
 import os
 import sys
@@ -29,9 +33,9 @@ import time
 
 import XenAPI
 
+sys.path.insert(0, '/usr/share/openvswitch/python')
+
 import ovs.dirs
-from ovs.db import error
-from ovs.db import types
 import ovs.daemon
 import ovs.db.idl
 import ovs.unixctl
@@ -68,7 +72,7 @@ def init_session():
 
     try:
         session = XenAPI.xapi_local()
-        session.xenapi.login_with_password("", "", "", "ovs-xapi-sync")
+        session.xenapi.login_with_password("", "")
     except XenAPI.Failure, e:
         session = None
         vlog.warn("Couldn't login to XAPI (%s)" % e)
@@ -166,6 +170,33 @@ def get_vm_id(if_name, xs_vm_uuid):
         return xs_vm_uuid
 
 
+# NOTE(jkoelker) Return the value of "neutron-port-uuid" falling back
+#                to the value of "nicira-iface-if"
+def get_neutron_id(if_name, xs_vif_uuid):
+    if not if_name.startswith("vif"):
+        return None
+
+    if xs_vif_uuid is None:
+        return None
+
+    if not init_session():
+        vlog.warn("Failed to get interface id %s because"
+                  " XAPI session could not be initialized" % if_name)
+        return None
+
+    try:
+        vif = session.xenapi.VIF.get_by_uuid(xs_vif_uuid)
+        rec = session.xenapi.VIF.get_record(vif)
+
+        if 'neutron-port-uuid' in rec['other_config']:
+            return rec['other_config']['neutron-port-uuid']
+
+        return rec['other_config'].get('nicira-iface-id')
+    except XenAPI.Failure:
+        vlog.warn("Could not find XAPI entry for VIF %s" % if_name)
+        return None
+
+
 def set_or_delete(d, key, value):
     if value is None:
         if key in d:
@@ -185,30 +216,6 @@ def set_external_id(row, key, value):
         row.external_ids = external_ids
 
 
-# XenServer does not call interface-reconfigure on internal networks,
-# which is where the fail-mode would normally be set.
-def update_fail_mode(row):
-    rec = get_network_by_bridge(row.name)
-    if not rec:
-        return
-
-    fail_mode = rec['other_config'].get('vswitch-controller-fail-mode')
-
-    if not fail_mode:
-        pools = session.xenapi.pool.get_all()
-        if len(pools) == 1:
-            prec = session.xenapi.pool.get_record(pools[0])
-            fail_mode = prec['other_config'].get(
-                    'vswitch-controller-fail-mode')
-
-    if fail_mode not in ['standalone', 'secure']:
-        fail_mode = 'standalone'
-
-    row.verify("fail_mode")
-    if row.fail_mode != fail_mode:
-        row.fail_mode = fail_mode
-
-
 def update_in_band_mgmt(row):
     rec = get_network_by_bridge(row.name)
     if not rec:
@@ -237,7 +244,7 @@ def main():
 
     ovs.vlog.add_args(parser)
     ovs.daemon.add_args(parser)
-    args = parser.parse_args()
+    args, __ = parser.parse_known_args()
     ovs.vlog.handle_args(args)
     ovs.daemon.handle_args(args)
 
@@ -264,8 +271,6 @@ def main():
         time.sleep(1)
 
     bridges = {}                # Map from bridge name to nicira-bridge-id
-    iface_ids = {}              # Map from xs-vif-uuid to iface-id
-    vm_ids = {}                 # Map from xs-vm-uuid to vm-id
     seqno = idl.change_seqno    # Sequence number when we last processed the db
     while True:
         unixctl_server.run()
@@ -288,8 +293,6 @@ def main():
         if flush_cache:
             vlog.info("Flushing cache as the result of unixctl.")
             bridges = {}
-            iface_ids = {}
-            vm_ids = {}
             flush_cache = False
         seqno = idl.change_seqno
 
@@ -297,96 +300,40 @@ def main():
 
         new_bridges = {}
         for row in idl.tables["Bridge"].rows.itervalues():
-            bridge_id = bridges.get(row.name)
-            if bridge_id is None:
-                # Configure the new bridge.
-                update_fail_mode(row)
+            if row.name in bridges:
+                bridge_id_cache = bridges[row.name]
+            else:
+                # New bridge.
                 update_in_band_mgmt(row)
+                bridge_id_cache = get_bridge_id(row.name)
+
+            bridge_id = bridge_id_cache
+            if bridge_id is None:
+                bridge_id = row.external_ids.get("xs-network-uuids")
 
-                # Get the correct bridge_id, if we can.
-                bridge_id = get_bridge_id(row.name)
-                if bridge_id is None:
-                    xs_network_uuids = row.external_ids.get("xs-network-uuids")
-                    if xs_network_uuids:
-                        bridge_ids = xs_network_uuids.split(";")
-                        if len(bridge_ids) == 1:
-                            bridge_id = bridge_ids[0]
-                        else:
-                            bridge_id = get_single_bridge_id(bridge_ids,
-                                                             row.name)
-            set_external_id(row, "bridge-id", bridge_id)
+                if bridge_id and len(bridge_id.split(";")) > 1:
+                    bridge_ids = bridge_id.split(";")
+                    bridge_id = get_single_bridge_id(bridge_ids, row.name,
+                                                     "")
+                if bridge_id:
+                    bridge_id_cache = bridge_id
 
             if bridge_id is not None:
-                new_bridges[row.name] = bridge_id
+                set_external_id(row, "bridge-id", bridge_id.split(";")[0])
+
+            new_bridges[row.name] = bridge_id_cache
+
         bridges = new_bridges
 
-        iface_by_name = {}
         for row in idl.tables["Interface"].rows.itervalues():
-            iface_by_name[row.name] = row
+            if not row.name.startswith("vif"):
+                continue
 
-        new_iface_ids = {}
-        new_vm_ids = {}
-        for row in idl.tables["Interface"].rows.itervalues():
-            # Match up paired vif and tap devices.
-            if row.name.startswith("vif"):
-                vif = row
-                tap = iface_by_name.get("tap%s" % row.name[3:])
-            elif row.name.startswith("tap"):
-                tap = row
-                vif = iface_by_name.get("vif%s" % row.name[3:])
-            else:
-                tap = vif = None
-
-            # Several tap external-ids need to be copied from the vif.
-            if row == tap and vif:
-                keys = ["attached-mac",
-                        "xs-network-uuid",
-                        "xs-vif-uuid",
-                        "xs-vm-uuid"]
-                for k in keys:
-                    set_external_id(row, k, vif.external_ids.get(k))
-
-            # Map from xs-vif-uuid to iface-id.
-            #
-            # (A tap's xs-vif-uuid comes from its vif.  That falls out
-            # naturally from the copy loop above.)
-            xvu = row.external_ids.get("xs-vif-uuid")
-            if xvu:
-                iface_id = (new_iface_ids.get(xvu)
-                            or iface_ids.get(xvu)
-                            or get_iface_id(row.name, xvu))
-                new_iface_ids[xvu] = iface_id
-            else:
-                # No xs-vif-uuid therefore no iface-id.
-                iface_id = None
-            set_external_id(row, "iface-id", iface_id)
-
-            # Map from xs-vm-uuid to vm-id.
-            xvmu = row.external_ids.get("xs-vm-uuid")
-            if xvmu:
-                vm_id = (new_vm_ids.get(xvmu)
-                         or vm_ids.get(xvmu)
-                         or get_vm_id(row.name, xvmu))
-                new_vm_ids[xvmu] = vm_id
-            else:
-                vm_id = None
-            set_external_id(row, "vm-id", vm_id)
-
-            # When there's a vif and a tap, the tap is active (used for
-            # traffic).  When there's just a vif, the vif is active.
-            #
-            # A tap on its own shouldn't happen, and we don't know
-            # anything about other kinds of devices, so we don't use
-            # an iface-status for those devices at all.
-            if vif and tap:
-                set_external_id(tap, "iface-status", "active")
-                set_external_id(vif, "iface-status", "inactive")
-            elif vif:
-                set_external_id(vif, "iface-status", "active")
-            else:
-                set_external_id(row, "iface-status", None)
-        iface_ids = new_iface_ids
-        vm_ids = new_vm_ids
+            neutron_id = get_neutron_id(row.name,
+                                        row.external_ids.get("xs-vif-uuid"))
+
+            if neutron_id is not None:
+                set_external_id(row, 'neutron-port-uuid', neutron_id)
 
         txn.add_comment("ovs-xapi-sync: Updating records from XAPI")
         txn.commit_block()
-- 
2.17.2 (Apple Git-113)
